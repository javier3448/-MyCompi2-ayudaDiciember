/* The following code was generated by JFlex 1.7.0 */

/*********************************************************************/
/*------------------------------scanner------------------------------*/
/*********************************************************************/

//----------------User code----------------

package Parser;
import java_cup.runtime.*;
import MyObjects.MyError.MyErrorKind;
import MyObjects.MyError;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Parser/scannerSpecification.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_STATE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\12\1\3\1\2\1\0\1\3\1\1\16\12\4\0\1\3\1\53"+
    "\1\43\1\0\1\11\1\55\1\56\1\0\1\44\1\45\1\5\1\54"+
    "\1\47\1\6\1\10\1\4\12\7\1\0\1\46\1\50\1\51\1\52"+
    "\2\0\1\37\2\11\1\35\12\11\1\36\3\11\1\41\1\33\6\11"+
    "\1\0\1\60\2\0\1\11\1\0\1\30\1\31\1\25\1\42\1\17"+
    "\1\20\1\32\1\14\1\15\2\11\1\16\1\11\1\26\1\34\1\27"+
    "\1\11\1\23\1\21\1\22\1\24\1\11\1\13\1\11\1\40\1\11"+
    "\1\0\1\57\2\0\41\12\2\0\4\11\4\0\1\11\2\0\1\12"+
    "\7\0\1\11\4\0\1\11\5\0\27\11\1\0\37\11\1\0\u01ca\11"+
    "\4\0\14\11\16\0\5\11\7\0\1\11\1\0\1\11\21\0\160\12"+
    "\5\11\1\0\2\11\2\0\4\11\1\0\1\11\6\0\1\11\1\0"+
    "\3\11\1\0\1\11\1\0\24\11\1\0\123\11\1\0\213\11\1\0"+
    "\5\12\2\0\246\11\1\0\46\11\2\0\1\11\6\0\51\11\6\0"+
    "\1\11\1\0\55\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0"+
    "\1\12\10\0\33\11\4\0\4\11\15\0\6\12\5\0\1\11\4\0"+
    "\13\12\1\0\1\12\3\0\53\11\37\12\4\0\2\11\1\12\143\11"+
    "\1\0\1\11\10\12\1\0\6\12\2\11\2\12\1\0\4\12\2\11"+
    "\12\12\3\11\2\0\1\11\17\0\1\12\1\11\1\12\36\11\33\12"+
    "\2\0\131\11\13\12\1\11\16\0\12\12\41\11\11\12\2\11\4\0"+
    "\1\11\2\0\1\12\30\11\4\12\1\11\11\12\1\11\3\12\1\11"+
    "\5\12\22\0\31\11\3\12\4\0\13\11\65\0\25\11\1\0\10\11"+
    "\25\0\61\12\66\11\3\12\1\11\22\12\1\11\7\12\12\11\2\12"+
    "\2\0\12\12\1\0\20\11\3\12\1\0\10\11\2\0\2\11\2\0"+
    "\26\11\1\0\7\11\1\0\1\11\3\0\4\11\2\0\1\12\1\11"+
    "\7\12\2\0\2\12\2\0\3\12\1\11\10\0\1\12\4\0\2\11"+
    "\1\0\3\11\2\12\2\0\12\12\4\11\7\0\2\11\1\0\1\12"+
    "\2\0\3\12\1\0\6\11\4\0\2\11\2\0\26\11\1\0\7\11"+
    "\1\0\2\11\1\0\2\11\1\0\2\11\2\0\1\12\1\0\5\12"+
    "\4\0\2\12\2\0\3\12\3\0\1\12\7\0\4\11\1\0\1\11"+
    "\7\0\14\12\3\11\1\12\13\0\3\12\1\0\11\11\1\0\3\11"+
    "\1\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11\2\0\1\12"+
    "\1\11\10\12\1\0\3\12\1\0\3\12\2\0\1\11\17\0\2\11"+
    "\2\12\2\0\12\12\1\0\1\11\7\0\1\11\6\12\1\0\3\12"+
    "\1\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\2\11"+
    "\1\0\5\11\2\0\1\12\1\11\7\12\2\0\2\12\2\0\3\12"+
    "\10\0\2\12\4\0\2\11\1\0\3\11\2\12\2\0\12\12\1\0"+
    "\1\11\20\0\1\12\1\11\1\0\6\11\3\0\3\11\1\0\4\11"+
    "\3\0\2\11\1\0\1\11\1\0\2\11\3\0\2\11\3\0\3\11"+
    "\3\0\14\11\4\0\5\12\3\0\3\12\1\0\4\12\2\0\1\11"+
    "\6\0\1\12\16\0\12\12\11\0\1\11\6\0\5\12\10\11\1\0"+
    "\3\11\1\0\27\11\1\0\20\11\3\0\1\11\7\12\1\0\3\12"+
    "\1\0\4\12\7\0\2\12\1\0\3\11\5\0\2\11\2\12\2\0"+
    "\12\12\20\0\1\11\3\12\1\0\10\11\1\0\3\11\1\0\27\11"+
    "\1\0\12\11\1\0\5\11\2\0\1\12\1\11\7\12\1\0\3\12"+
    "\1\0\4\12\7\0\2\12\7\0\1\11\1\0\2\11\2\12\2\0"+
    "\12\12\1\0\2\11\15\0\4\12\1\0\10\11\1\0\3\11\1\0"+
    "\51\11\2\12\1\11\7\12\1\0\3\12\1\0\4\12\1\11\5\0"+
    "\3\11\1\12\7\0\3\11\2\12\2\0\12\12\12\0\6\11\2\0"+
    "\2\12\1\0\22\11\3\0\30\11\1\0\11\11\1\0\1\11\2\0"+
    "\7\11\3\0\1\12\4\0\6\12\1\0\1\12\1\0\10\12\6\0"+
    "\12\12\2\0\2\12\15\0\60\11\1\12\2\11\7\12\4\0\10\11"+
    "\10\12\1\0\12\12\47\0\2\11\1\0\1\11\1\0\5\11\1\0"+
    "\30\11\1\0\1\11\1\0\12\11\1\12\2\11\11\12\1\11\2\0"+
    "\5\11\1\0\1\11\1\0\6\12\2\0\12\12\2\0\4\11\40\0"+
    "\1\11\27\0\2\12\6\0\12\12\13\0\1\12\1\0\1\12\1\0"+
    "\1\12\4\0\2\12\10\11\1\0\44\11\4\0\24\12\1\0\2\12"+
    "\5\11\13\12\1\0\44\12\11\0\1\12\71\0\53\11\24\12\1\11"+
    "\12\12\6\0\6\11\4\12\4\11\3\12\1\11\3\12\2\11\7\12"+
    "\3\11\4\12\15\11\14\12\1\11\17\12\2\0\46\11\1\0\1\11"+
    "\5\0\1\11\2\0\53\11\1\0\u014d\11\1\0\4\11\2\0\7\11"+
    "\1\0\1\11\1\0\4\11\2\0\51\11\1\0\4\11\2\0\41\11"+
    "\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0\17\11"+
    "\1\0\71\11\1\0\4\11\2\0\103\11\2\0\3\12\40\0\20\11"+
    "\20\0\126\11\2\0\6\11\3\0\u026c\11\2\0\21\11\1\0\32\11"+
    "\5\0\113\11\3\0\13\11\7\0\15\11\1\0\4\11\3\12\13\0"+
    "\22\11\3\12\13\0\22\11\2\12\14\0\15\11\1\0\3\11\1\0"+
    "\2\12\14\0\64\11\40\12\3\0\1\11\3\0\2\11\1\12\2\0"+
    "\12\12\41\0\4\12\1\0\12\12\6\0\131\11\7\0\5\11\2\12"+
    "\42\11\1\12\1\11\5\0\106\11\12\0\37\11\1\0\14\12\4\0"+
    "\14\12\12\0\12\12\36\11\2\0\5\11\13\0\54\11\4\0\32\11"+
    "\6\0\12\12\46\0\27\11\5\12\4\0\65\11\12\12\1\0\35\12"+
    "\2\0\13\12\6\0\12\12\15\0\1\11\10\0\16\12\102\0\5\12"+
    "\57\11\21\12\7\11\4\0\12\12\21\0\11\12\14\0\3\12\36\11"+
    "\15\12\2\11\12\12\54\11\16\12\14\0\44\11\24\12\10\0\12\12"+
    "\3\0\3\11\12\12\44\11\2\0\11\11\7\0\53\11\2\0\3\11"+
    "\20\0\3\12\1\0\25\12\4\11\1\12\6\11\1\12\2\11\3\12"+
    "\1\11\5\0\300\11\72\12\1\0\5\12\u0116\11\2\0\6\11\2\0"+
    "\46\11\2\0\6\11\2\0\10\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\37\11\2\0\65\11\1\0\7\11\1\0\1\11\3\0"+
    "\3\11\1\0\7\11\3\0\4\11\2\0\6\11\4\0\15\11\5\0"+
    "\3\11\1\0\7\11\16\0\5\12\32\0\5\12\20\0\2\11\23\0"+
    "\1\11\13\0\5\12\1\0\12\12\1\0\1\11\15\0\1\11\20\0"+
    "\15\11\3\0\40\11\20\0\15\12\4\0\1\12\3\0\14\12\21\0"+
    "\1\11\4\0\1\11\2\0\12\11\1\0\1\11\3\0\5\11\6\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0\13\11\2\0"+
    "\4\11\5\0\5\11\4\0\1\11\21\0\51\11\u0a77\0\57\11\1\0"+
    "\57\11\1\0\205\11\6\0\4\11\3\12\2\11\14\0\46\11\1\0"+
    "\1\11\5\0\1\11\2\0\70\11\7\0\1\11\17\0\1\12\27\11"+
    "\11\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11"+
    "\1\0\7\11\1\0\7\11\1\0\7\11\1\0\40\12\57\0\1\11"+
    "\u01d5\0\3\11\31\0\11\11\6\12\1\0\5\11\2\0\5\11\4\0"+
    "\126\11\2\0\2\12\2\0\3\11\1\0\132\11\1\0\4\11\5\0"+
    "\53\11\1\0\136\11\21\0\33\11\65\0\20\11\u0200\0\u19b6\11\112\0"+
    "\u51f0\11\20\0\u048d\11\103\0\56\11\2\0\u010d\11\3\0\20\11\12\12"+
    "\2\11\24\0\57\11\1\12\4\0\12\12\1\0\37\11\2\12\120\11"+
    "\2\12\45\0\11\11\2\0\147\11\2\0\65\11\2\0\5\11\60\0"+
    "\13\11\1\12\3\11\1\12\4\11\1\12\27\11\5\12\20\0\1\11"+
    "\7\0\64\11\14\0\2\12\62\11\22\12\12\0\12\12\6\0\22\12"+
    "\6\11\3\0\1\11\1\0\2\11\13\12\34\11\10\12\2\0\27\11"+
    "\15\12\14\0\35\11\3\0\4\12\57\11\16\12\16\0\1\11\12\12"+
    "\6\0\5\11\1\12\12\11\12\12\5\11\1\0\51\11\16\12\11\0"+
    "\3\11\1\12\10\11\2\12\2\0\12\12\6\0\27\11\3\0\1\11"+
    "\3\12\62\11\1\12\1\11\3\12\2\11\2\12\5\11\2\12\1\11"+
    "\1\12\1\11\30\0\3\11\2\0\13\11\5\12\2\0\3\11\2\12"+
    "\12\0\6\11\2\0\6\11\2\0\6\11\11\0\7\11\1\0\7\11"+
    "\1\0\53\11\1\0\14\11\10\0\163\11\10\12\1\0\2\12\2\0"+
    "\12\12\6\0\u2ba4\11\14\0\27\11\4\0\61\11\u2104\0\u016e\11\2\0"+
    "\152\11\46\0\7\11\14\0\5\11\5\0\1\11\1\12\12\11\1\0"+
    "\15\11\1\0\5\11\1\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\154\11\41\0\u016b\11\22\0\100\11\2\0\66\11\50\0\15\11\3\0"+
    "\20\12\20\0\20\12\3\0\2\11\30\0\3\11\31\0\1\11\6\0"+
    "\5\11\1\0\207\11\2\0\1\12\4\0\1\11\13\0\12\12\7\0"+
    "\32\11\4\0\1\11\1\0\32\11\13\0\131\11\3\0\6\11\2\0"+
    "\6\11\2\0\6\11\2\0\3\11\3\0\2\11\3\0\2\11\22\0"+
    "\3\12\4\0\14\11\1\0\32\11\1\0\23\11\1\0\2\11\1\0"+
    "\17\11\2\0\16\11\42\0\173\11\105\0\65\11\210\0\1\12\202\0"+
    "\35\11\3\0\61\11\17\0\1\12\37\0\40\11\15\0\36\11\5\0"+
    "\46\11\5\12\5\0\36\11\2\0\44\11\4\0\10\11\1\0\5\11"+
    "\52\0\236\11\2\0\12\12\6\0\44\11\4\0\44\11\4\0\50\11"+
    "\10\0\64\11\234\0\u0137\11\11\0\26\11\12\0\10\11\230\0\6\11"+
    "\2\0\1\11\1\0\54\11\1\0\2\11\3\0\1\11\2\0\27\11"+
    "\12\0\27\11\11\0\37\11\101\0\23\11\1\0\2\11\12\0\26\11"+
    "\12\0\32\11\106\0\70\11\6\0\2\11\100\0\1\11\3\12\1\0"+
    "\2\12\5\0\4\12\4\11\1\0\3\11\1\0\35\11\2\0\3\12"+
    "\4\0\1\12\40\0\35\11\3\0\35\11\43\0\10\11\1\0\34\11"+
    "\2\12\31\0\66\11\12\0\26\11\12\0\23\11\15\0\22\11\156\0"+
    "\111\11\67\0\63\11\15\0\63\11\15\0\44\11\4\12\10\0\12\12"+
    "\u01c6\0\35\11\12\0\1\11\10\0\26\11\13\12\217\0\27\11\11\0"+
    "\3\12\65\11\17\12\37\0\12\12\17\0\4\12\55\11\13\12\2\0"+
    "\1\12\17\0\1\12\2\0\31\11\7\0\12\12\6\0\3\12\44\11"+
    "\16\12\1\0\12\12\4\0\1\11\2\12\11\0\43\11\1\12\2\0"+
    "\1\11\11\0\3\12\60\11\16\12\4\11\4\0\4\12\3\0\12\12"+
    "\1\11\1\0\1\11\43\0\22\11\1\0\31\11\14\12\6\0\1\12"+
    "\101\0\7\11\1\0\1\11\1\0\4\11\1\0\17\11\1\0\12\11"+
    "\7\0\57\11\14\12\5\0\12\12\6\0\4\12\1\0\10\11\2\0"+
    "\2\11\2\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11\1\0"+
    "\2\12\1\11\7\12\2\0\2\12\2\0\3\12\2\0\1\11\6\0"+
    "\1\12\5\0\5\11\2\12\2\0\7\12\3\0\5\12\213\0\65\11"+
    "\22\12\4\11\5\0\12\12\4\0\1\12\1\11\40\0\60\11\24\12"+
    "\2\11\1\0\1\11\10\0\12\12\246\0\57\11\7\12\2\0\11\12"+
    "\27\0\4\11\2\12\42\0\60\11\21\12\3\0\1\11\13\0\12\12"+
    "\46\0\53\11\15\12\1\11\7\0\12\12\66\0\33\11\2\0\17\12"+
    "\4\0\12\12\306\0\54\11\17\12\145\0\100\11\12\12\25\0\1\11"+
    "\240\0\10\11\2\0\47\11\7\12\2\0\7\12\1\11\1\0\1\11"+
    "\1\12\33\0\1\11\12\12\50\11\7\12\1\11\4\12\10\0\1\12"+
    "\10\0\1\11\13\12\56\11\20\12\3\0\1\11\42\0\71\11\u0107\0"+
    "\11\11\1\0\45\11\10\12\1\0\10\12\1\11\17\0\12\12\30\0"+
    "\36\11\2\0\26\12\1\0\16\12\111\0\7\11\1\0\2\11\1\0"+
    "\46\11\6\12\3\0\1\12\1\0\2\12\1\0\7\12\1\11\1\12"+
    "\10\0\12\12\6\0\6\11\1\0\2\11\1\0\40\11\5\12\1\0"+
    "\2\12\1\0\5\12\1\11\7\0\12\12\u0136\0\23\11\4\12\346\0"+
    "\4\11\37\0\u039a\11\146\0\157\11\21\0\304\11\u0abc\0\u042f\11\1\0"+
    "\11\12\u0fc7\0\u0247\11\u21b9\0\u0239\11\7\0\37\11\1\0\12\12\146\0"+
    "\36\11\2\0\5\12\13\0\60\11\7\12\11\0\4\11\14\0\12\12"+
    "\11\0\25\11\5\0\23\11\u02b0\0\100\11\200\0\113\11\4\0\1\12"+
    "\1\11\67\12\7\0\4\12\15\11\100\0\2\11\1\0\1\11\34\0"+
    "\u17f8\11\10\0\u02f3\11\u250d\0\u011f\11\61\0\3\11\21\0\4\11\10\0"+
    "\u018c\11\u0904\0\153\11\5\0\15\11\3\0\11\11\7\0\12\11\3\0"+
    "\2\12\1\0\4\12\u14c1\0\5\12\3\0\26\12\2\0\7\12\36\0"+
    "\4\12\224\0\3\12\u01bb\0\125\11\1\0\107\11\1\0\2\11\2\0"+
    "\1\11\2\0\2\11\2\0\4\11\1\0\14\11\1\0\1\11\1\0"+
    "\7\11\1\0\101\11\1\0\4\11\2\0\10\11\1\0\7\11\1\0"+
    "\34\11\1\0\4\11\1\0\5\11\1\0\1\11\3\0\7\11\1\0"+
    "\u0154\11\2\0\31\11\1\0\31\11\1\0\37\11\1\0\31\11\1\0"+
    "\37\11\1\0\31\11\1\0\37\11\1\0\31\11\1\0\37\11\1\0"+
    "\31\11\1\0\10\11\2\0\62\12\u0200\0\67\12\4\0\62\12\10\0"+
    "\1\12\16\0\1\12\26\0\5\12\1\0\17\12\u0550\0\7\12\1\0"+
    "\21\12\2\0\7\12\1\0\2\12\1\0\5\12\325\0\55\11\3\0"+
    "\7\12\7\11\2\0\12\12\4\0\1\11\u0171\0\54\11\16\12\5\0"+
    "\1\11\u0500\0\305\11\13\0\7\12\51\0\104\11\7\12\1\11\4\0"+
    "\12\12\u0356\0\1\11\u014f\0\4\11\1\0\33\11\1\0\2\11\1\0"+
    "\1\11\2\0\1\11\1\0\12\11\1\0\4\11\1\0\1\11\1\0"+
    "\1\11\6\0\1\11\4\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\2\11\1\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\2\11\1\0\1\11\2\0"+
    "\4\11\1\0\7\11\1\0\4\11\1\0\4\11\1\0\1\11\1\0"+
    "\12\11\1\0\21\11\5\0\3\11\1\0\5\11\1\0\21\11\u1144\0"+
    "\ua6d7\11\51\0\u1035\11\13\0\336\11\2\0\u1682\11\16\0\u1d31\11\u0c1f\0"+
    "\u021e\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\12\36\0\140\12\200\0\360\12\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\17\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\1\1\23\1\24\1\25\1\2"+
    "\2\0\1\7\1\26\16\7\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\2\0\1\6"+
    "\17\7\1\0\1\2\2\7\1\41\4\7\1\42\1\43"+
    "\1\7\1\44\5\7\1\45\1\7\1\46\4\7\1\47"+
    "\6\7\1\50\1\7\1\51\2\7\1\52\1\53\3\7"+
    "\1\54\1\55\6\7\1\56\11\7\1\57\2\7\1\60"+
    "\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\142\0\304\0\142\0\365"+
    "\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\142\0\142\0\142\0\142\0\142\0\u0436\0\u0467\0\u0498"+
    "\0\u04c9\0\142\0\142\0\u04fa\0\u052b\0\u055c\0\142\0\u058d"+
    "\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0157\0\u0682\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\142\0\142\0\142\0\142\0\142"+
    "\0\142\0\142\0\142\0\142\0\142\0\u0930\0\u0961\0\u0620"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71"+
    "\0\u0930\0\u0ca2\0\u0cd3\0\u0157\0\u0d04\0\u0d35\0\u0d66\0\u0d97"+
    "\0\u0157\0\u0157\0\u0dc8\0\u0157\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c"+
    "\0\u0ebd\0\u0157\0\u0eee\0\u0157\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2"+
    "\0\u0157\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u0157"+
    "\0\u1109\0\u0157\0\u113a\0\u116b\0\u0157\0\u0157\0\u119c\0\u11cd"+
    "\0\u11fe\0\u0157\0\u0157\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3"+
    "\0\u1324\0\u0157\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a"+
    "\0\u147b\0\u14ac\0\u14dd\0\u0157\0\u150e\0\u153f\0\u0157\0\u0157";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\3\1\13\1\12\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\12\1\23\1\24\1\12\1\25"+
    "\5\12\1\26\1\12\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\3\1\46\2\3\40\46\1\47\14\46"+
    "\1\50\63\0\1\5\62\0\1\51\1\52\62\0\1\11"+
    "\60\0\1\11\1\53\57\0\1\12\1\0\32\12\25\0"+
    "\1\12\1\0\3\12\1\54\26\12\25\0\1\12\1\0"+
    "\7\12\1\55\22\12\25\0\1\12\1\0\6\12\1\56"+
    "\23\12\25\0\1\12\1\0\5\12\1\57\24\12\25\0"+
    "\1\12\1\0\17\12\1\60\12\12\25\0\1\12\1\0"+
    "\11\12\1\61\1\12\1\62\1\63\15\12\25\0\1\12"+
    "\1\0\12\12\1\64\17\12\25\0\1\12\1\0\6\12"+
    "\1\65\23\12\25\0\1\12\1\0\13\12\1\66\16\12"+
    "\25\0\1\12\1\0\12\12\1\67\17\12\25\0\1\12"+
    "\1\0\23\12\1\70\6\12\25\0\1\12\1\0\12\12"+
    "\1\71\17\12\25\0\1\12\1\0\11\12\1\72\20\12"+
    "\25\0\1\12\1\0\23\12\1\73\6\12\67\0\1\74"+
    "\60\0\1\75\60\0\1\76\60\0\1\77\65\0\1\100"+
    "\61\0\1\101\1\0\1\46\2\0\40\46\1\0\14\46"+
    "\23\0\1\102\1\103\2\0\1\104\14\0\1\105\15\0"+
    "\1\51\1\4\1\5\56\51\5\106\1\107\53\106\7\0"+
    "\1\110\60\0\1\12\1\0\4\12\1\111\25\12\25\0"+
    "\1\12\1\0\15\12\1\112\14\12\25\0\1\12\1\0"+
    "\10\12\1\113\21\12\25\0\1\12\1\0\5\12\1\114"+
    "\24\12\25\0\1\12\1\0\12\12\1\115\17\12\25\0"+
    "\1\12\1\0\20\12\1\116\11\12\25\0\1\12\1\0"+
    "\17\12\1\117\12\12\25\0\1\12\1\0\13\12\1\120"+
    "\16\12\25\0\1\12\1\0\11\12\1\121\20\12\25\0"+
    "\1\12\1\0\5\12\1\122\24\12\25\0\1\12\1\0"+
    "\4\12\1\123\25\12\25\0\1\12\1\0\23\12\1\124"+
    "\6\12\25\0\1\12\1\0\12\12\1\125\17\12\25\0"+
    "\1\12\1\0\12\12\1\126\17\12\25\0\1\12\1\0"+
    "\13\12\1\127\16\12\16\0\5\106\1\130\57\106\1\131"+
    "\1\130\53\106\7\0\1\12\1\0\5\12\1\132\24\12"+
    "\25\0\1\12\1\0\21\12\1\133\10\12\25\0\1\12"+
    "\1\0\6\12\1\134\23\12\25\0\1\12\1\0\10\12"+
    "\1\135\21\12\25\0\1\12\1\0\4\12\1\136\6\12"+
    "\1\137\16\12\25\0\1\12\1\0\10\12\1\140\21\12"+
    "\25\0\1\12\1\0\15\12\1\141\14\12\25\0\1\12"+
    "\1\0\6\12\1\142\23\12\25\0\1\12\1\0\13\12"+
    "\1\143\16\12\25\0\1\12\1\0\5\12\1\144\24\12"+
    "\25\0\1\12\1\0\15\12\1\145\14\12\25\0\1\12"+
    "\1\0\5\12\1\146\24\12\25\0\1\12\1\0\6\12"+
    "\1\147\23\12\25\0\1\12\1\0\4\12\1\150\25\12"+
    "\25\0\1\12\1\0\20\12\1\151\11\12\16\0\4\106"+
    "\1\5\1\130\53\106\7\0\1\12\1\0\6\12\1\152"+
    "\23\12\25\0\1\12\1\0\11\12\1\153\20\12\25\0"+
    "\1\12\1\0\6\12\1\154\23\12\25\0\1\12\1\0"+
    "\15\12\1\155\14\12\25\0\1\12\1\0\14\12\1\156"+
    "\15\12\25\0\1\12\1\0\11\12\1\157\20\12\25\0"+
    "\1\12\1\0\12\12\1\160\17\12\25\0\1\12\1\0"+
    "\11\12\1\161\20\12\25\0\1\12\1\0\6\12\1\162"+
    "\23\12\25\0\1\12\1\0\21\12\1\163\10\12\25\0"+
    "\1\12\1\0\15\12\1\164\14\12\25\0\1\12\1\0"+
    "\5\12\1\165\24\12\25\0\1\12\1\0\3\12\1\166"+
    "\26\12\25\0\1\12\1\0\21\12\1\167\10\12\25\0"+
    "\1\12\1\0\11\12\1\170\20\12\25\0\1\12\1\0"+
    "\12\12\1\171\17\12\25\0\1\12\1\0\15\12\1\172"+
    "\14\12\25\0\1\12\1\0\17\12\1\173\12\12\25\0"+
    "\1\12\1\0\5\12\1\174\24\12\25\0\1\12\1\0"+
    "\21\12\1\175\10\12\25\0\1\12\1\0\6\12\1\176"+
    "\23\12\25\0\1\12\1\0\25\12\1\177\4\12\25\0"+
    "\1\12\1\0\22\12\1\200\7\12\25\0\1\12\1\0"+
    "\4\12\1\201\25\12\25\0\1\12\1\0\15\12\1\202"+
    "\14\12\25\0\1\12\1\0\23\12\1\203\6\12\25\0"+
    "\1\12\1\0\7\12\1\204\22\12\25\0\1\12\1\0"+
    "\23\12\1\205\6\12\25\0\1\12\1\0\15\12\1\206"+
    "\14\12\25\0\1\12\1\0\26\12\1\207\1\12\1\210"+
    "\1\12\25\0\1\12\1\0\24\12\1\211\5\12\25\0"+
    "\1\12\1\0\21\12\1\212\10\12\25\0\1\12\1\0"+
    "\12\12\1\213\17\12\25\0\1\12\1\0\11\12\1\214"+
    "\20\12\25\0\1\12\1\0\23\12\1\215\6\12\25\0"+
    "\1\12\1\0\12\12\1\216\17\12\25\0\1\12\1\0"+
    "\12\12\1\217\17\12\25\0\1\12\1\0\13\12\1\220"+
    "\16\12\25\0\1\12\1\0\17\12\1\221\12\12\25\0"+
    "\1\12\1\0\4\12\1\222\25\12\25\0\1\12\1\0"+
    "\20\12\1\223\11\12\25\0\1\12\1\0\27\12\1\224"+
    "\2\12\25\0\1\12\1\0\15\12\1\225\14\12\25\0"+
    "\1\12\1\0\5\12\1\226\24\12\25\0\1\12\1\0"+
    "\21\12\1\227\10\12\25\0\1\12\1\0\6\12\1\230"+
    "\23\12\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5488];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\21\1\5\11"+
    "\4\1\2\11\3\1\1\11\2\1\2\0\20\1\12\11"+
    "\2\0\20\1\1\0\100\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuilder stringBuilder = new StringBuilder();

    //Helper functions to return multiple java_cup.runtime.Symbol to the parser
    private Symbol symbol(int type){
        return new Symbol(type, yyline + 1, yycolumn + 1);
    }
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline + 1, yycolumn + 1, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3602) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { MyError error = new MyError(MyErrorKind.LEXICO, yyline + 1, yycolumn + 1, "Illegal character <"+ yytext()+">");
    MyError.reportarError(error);
            } 
            // fall through
          case 50: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 51: break;
          case 3: 
            { return symbol(sym.DIV);
            } 
            // fall through
          case 52: break;
          case 4: 
            { return symbol(sym.MULT);
            } 
            // fall through
          case 53: break;
          case 5: 
            { return symbol(sym.MINUS);
            } 
            // fall through
          case 54: break;
          case 6: 
            { return symbol(sym.DOUBLE_LITERAL, Double.valueOf(yytext()));
            } 
            // fall through
          case 55: break;
          case 7: 
            { return symbol(sym.IDENTIFIER, yytext());
            } 
            // fall through
          case 56: break;
          case 8: 
            { stringBuilder.setLength(0); yybegin(STRING_STATE);
            } 
            // fall through
          case 57: break;
          case 9: 
            { return symbol(sym.O_PAREN);
            } 
            // fall through
          case 58: break;
          case 10: 
            { return symbol(sym.C_PAREN);
            } 
            // fall through
          case 59: break;
          case 11: 
            { return symbol(sym.SEMICOLON);
            } 
            // fall through
          case 60: break;
          case 12: 
            { return symbol(sym.COMMA);
            } 
            // fall through
          case 61: break;
          case 13: 
            { return symbol(sym.LESS);
            } 
            // fall through
          case 62: break;
          case 14: 
            { return symbol(sym.EQ);
            } 
            // fall through
          case 63: break;
          case 15: 
            { return symbol(sym.GREATER);
            } 
            // fall through
          case 64: break;
          case 16: 
            { return symbol(sym.NOT);
            } 
            // fall through
          case 65: break;
          case 17: 
            { return symbol(sym.PLUS);
            } 
            // fall through
          case 66: break;
          case 18: 
            { return symbol(sym.MOD);
            } 
            // fall through
          case 67: break;
          case 19: 
            { stringBuilder.append( yytext() );
            } 
            // fall through
          case 68: break;
          case 20: 
            { yybegin(YYINITIAL);
    return symbol(sym.STRING_LITERAL,
    stringBuilder.toString());
            } 
            // fall through
          case 69: break;
          case 21: 
            { stringBuilder.append('\\');
            } 
            // fall through
          case 70: break;
          case 22: 
            { return symbol(sym.IF);
            } 
            // fall through
          case 71: break;
          case 23: 
            { return symbol(sym.LESS_EQ);
            } 
            // fall through
          case 72: break;
          case 24: 
            { return symbol(sym.EQ_EQ);
            } 
            // fall through
          case 73: break;
          case 25: 
            { return symbol(sym.GREATER_EQ);
            } 
            // fall through
          case 74: break;
          case 26: 
            { return symbol(sym.NOT_EQ);
            } 
            // fall through
          case 75: break;
          case 27: 
            { return symbol(sym.AND);
            } 
            // fall through
          case 76: break;
          case 28: 
            { return symbol(sym.OR);
            } 
            // fall through
          case 77: break;
          case 29: 
            { stringBuilder.append('\t');
            } 
            // fall through
          case 78: break;
          case 30: 
            { stringBuilder.append('\r');
            } 
            // fall through
          case 79: break;
          case 31: 
            { stringBuilder.append('\n');
            } 
            // fall through
          case 80: break;
          case 32: 
            { stringBuilder.append('\"');
            } 
            // fall through
          case 81: break;
          case 33: 
            { return symbol(sym.ELSE);
            } 
            // fall through
          case 82: break;
          case 34: 
            { return symbol(sym.SCAN);
            } 
            // fall through
          case 83: break;
          case 35: 
            { return symbol(sym.BOOLEAN_LITERAL, new Boolean(true));
            } 
            // fall through
          case 84: break;
          case 36: 
            { return symbol(sym.NULL_LITERAL);
            } 
            // fall through
          case 85: break;
          case 37: 
            { return symbol(sym.WHILE);
            } 
            // fall through
          case 86: break;
          case 38: 
            { return symbol(sym.BOOLEAN_LITERAL, new Boolean(false));
            } 
            // fall through
          case 87: break;
          case 39: 
            { return symbol(sym.PRINT);
            } 
            // fall through
          case 88: break;
          case 40: 
            { return symbol(sym.STRUCT);
            } 
            // fall through
          case 89: break;
          case 41: 
            { return symbol(sym.RETURN);
            } 
            // fall through
          case 90: break;
          case 42: 
            { return symbol(sym.STRING);
            } 
            // fall through
          case 91: break;
          case 43: 
            { return symbol(sym.DOUBLE);
            } 
            // fall through
          case 92: break;
          case 44: 
            { return symbol(sym.BOOLEAN);
            } 
            // fall through
          case 93: break;
          case 45: 
            { return symbol(sym.ARREGLO);
            } 
            // fall through
          case 94: break;
          case 46: 
            { return symbol(sym.SUBSTRING);
            } 
            // fall through
          case 95: break;
          case 47: 
            { return symbol(sym.LENGTHOFARRAY);
            } 
            // fall through
          case 96: break;
          case 48: 
            { return symbol(sym.LENGTHOFSTRING);
            } 
            // fall through
          case 97: break;
          case 49: 
            { return symbol(sym.STRINGTODOUBLE);
            } 
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
